import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

recipe_storage = {}


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

# === FSM ===
class AddRecipe(StatesGroup):
    teaser_media = State()
    full_text = State()
    confirm = State()

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ===
async def is_subscriber(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        status_str = member.status.value
        print(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏] user_id={user_id}, status={status_str}")
        return status_str in {"member", "administrator", "creator", "owner"}
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏] {e}")
        return False

# === /admin ===
@router.message(Command("admin"))
async def admin_menu(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="add_recipe")]
    ])
    await message.answer("üë©‚Äçüç≥ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# === –ö–ù–û–ü–ö–ê "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç" ===
@router.callback_query(F.data == "add_recipe")
async def start_add(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –ü—Ä–∏—à–ª–∏ —Ç–∏–∑–µ—Ä (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤) —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ:")
    await state.clear()
    await state.set_state(AddRecipe.teaser_media)

# === –¢–ò–ó–ï–† + –ú–ï–î–ò–ê ===
@router.message(AddRecipe.teaser_media)
async def set_teaser_media(message: Message, state: FSMContext):
    text = message.caption or message.text or ""
    if len(text) > 200:
        return await message.answer(f"‚ùå –¢–∏–∑–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(text)}/200 —Å–∏–º–≤–æ–ª–æ–≤.")

    await state.update_data(teaser=text)

    if message.photo:
        file_id = message.photo[-1].file_id
        media_type = "photo"
        await state.update_data(media=(media_type, file_id))
    elif message.video:
        file_id = message.video.file_id
        media_type = "video"
        await state.update_data(media=(media_type, file_id))

    await message.answer("üßæ –í–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(AddRecipe.full_text)

# === –ü–û–õ–ù–´–ô –†–ï–¶–ï–ü–¢ ===
@router.message(AddRecipe.full_text)
async def set_full_text(message: Message, state: FSMContext):
    if not message.text:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞.")
    text = message.text.strip()
    if len(text) > 200:
        return await message.answer(f"‚ùå –ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(text)}/200 —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    await state.update_data(full_text=text)
    await send_preview(message.chat.id, state)
    await state.set_state(AddRecipe.confirm)

# === –ü–†–ï–î–ü–†–û–°–ú–û–¢–† ===
async def send_preview(chat_id: int, state: FSMContext):
    data = await state.get_data()
    teaser = data['teaser']
    media = data.get('media')

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∑–µ—Ä", callback_data="edit_teaser"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="edit_full")
        ],
        [InlineKeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å", callback_data="cancel")]
    ])

    if media:
        media_type, file_id = media
        if media_type == "photo":
            await bot.send_photo(chat_id, file_id, caption=teaser, reply_markup=kb)
        else:
            await bot.send_video(chat_id, file_id, caption=teaser, reply_markup=kb)
    else:
        await bot.send_message(chat_id, teaser, reply_markup=kb)

# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ===
@router.callback_query(F.data == "edit_teaser")
async def edit_teaser(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –ü—Ä–∏—à–ª–∏ –∑–∞–Ω–æ–≤–æ —Ç–∏–∑–µ—Ä —Å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ):")
    await state.set_state(AddRecipe.teaser_media)

@router.callback_query(F.data == "edit_full")
async def edit_full(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üßæ –í–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞:")
    await state.set_state(AddRecipe.full_text)

# === –°–ë–†–û–° ===
@router.callback_query(F.data == "cancel")
async def cancel_recipe(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫—É.")
    fake_message = Message(
        message_id=callback.message.message_id,
        chat=callback.message.chat,
        from_user=callback.from_user,
        date=callback.message.date,
        text="/admin"
    )
    await admin_menu(fake_message)

# === –û–ü–£–ë–õ–ò–ö–û–í–ê–¢–¨ ===
@router.callback_query(F.data == "publish")
async def publish_recipe(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    teaser = data.get("teaser")
    full_text = data.get("full_text")
    media = data.get("media")

    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ message
        sent_message = None

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID
        dummy_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...", callback_data="pending")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if media:
            media_type, file_id = media
            if media_type == "photo":
                sent_message = await bot.send_photo(CHANNEL_ID, file_id, caption=teaser, reply_markup=dummy_kb)
            else:
                sent_message = await bot.send_video(CHANNEL_ID, file_id, caption=teaser, reply_markup=dummy_kb)
        else:
            sent_message = await bot.send_message(CHANNEL_ID, text=teaser, reply_markup=dummy_kb)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ message_id
        recipe_storage[sent_message.message_id] = full_text

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data=f"show_recipe:{sent_message.message_id}")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await bot.edit_message_reply_markup(
            chat_id=sent_message.chat.id,
            message_id=sent_message.message_id,
            reply_markup=kb
        )

        await callback.message.answer("‚úÖ –†–µ—Ü–µ–ø—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
        await state.clear()

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")


# === –ü–û–ö–ê–ó–ê–¢–¨ –†–ï–¶–ï–ü–¢ ===
@router.callback_query(F.data.startswith("show_recipe:"))
async def handle_show_recipe(callback: CallbackQuery):
    user_id = callback.from_user.id
    is_sub = await is_subscriber(user_id)

    try:
        msg_id = int(callback.data.split(":")[1])
        full_text = recipe_storage.get(msg_id)
    except Exception:
        full_text = None

    if not full_text:
        return await callback.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    if is_sub:
        await callback.answer(full_text[:200], show_alert=True)
    else:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

# === –ó–ê–ü–£–°–ö ===
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
